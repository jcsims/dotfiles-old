set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'
"{{{ Bundles
"github repos
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-speeddating'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-characterize'
Bundle 'tpope/vim-unimpaired'
Bundle 'godlygeek/tabular'
Bundle 'kien/ctrlp.vim'
Bundle 'scrooloose/syntastic'
Bundle 'Rykka/colorv.vim'
Bundle 'vim-scripts/sudo.vim'
" Bundle 'ervandew/screen'
" Bundle 'jcfaria/Vim-R-plugin'
Bundle 'mhinz/vim-signify'
Bundle 'Valloric/YouCompleteMe'
Bundle 'guns/ultisnips'
Bundle 'tpope/vim-classpath'
Bundle 'tpope/vim-fireplace'
Bundle 'dahu/LearnVim'
Bundle 'vim-scripts/paredit.vim'

" Filetypes
Bundle 'guns/vim-clojure-static'
Bundle 'jcf/vim-latex'
Bundle 'tpope/vim-liquid'
Bundle 'tpope/vim-markdown'
Bundle 'mutewinter/nginx.vim'
Bundle 'leshill/vim-json'

" Colors!
Bundle 'tomasr/molokai'
Bundle 'kien/rainbow_parentheses.vim'
"}}}

filetype plugin indent on
syntax on

set shell=/usr/bin/zsh\ -l

"Set tab options to preferred 2 spaces
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

set encoding=utf-8
set scrolloff=3
set autoindent
set copyindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set wildignore=*.swp,*.bak
set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set nu
set title

" Visual block mode allows bounds outside the text (freeform)
set virtualedit=block

" Electric return for paredit mode
" Example: http://img8.imageshack.us/img8/9479/openparen.gif
let g:paredit_electric_returns = 1

"Search options, including <leader><space> to clear search results
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>

"Set up column at column width to stick with sane column width while coding
set nowrap
set formatoptions=qrn1
set colorcolumn=80

if has("autocmd")
  autocmd FileType tex set fo+=t tw=80
  autocmd FileType latex set fo+=t tw=80
  autocmd FileType txt set fo+=t tw=80
  autocmd FileType markdown set fo+=t tw=80
  autocmd FileType liquid set fo+=t tw=80
endif

"Save all files anytime focus is lost
if (expand("%") != "")
  au FocusLost * :wa
endif

"Allow for quick and easy editing and sourcing of vimrc
nnoremap <silent> <leader>ev :e $MYVIMRC<CR>
nnoremap <silent> <leader>sv :so $MYVIMRC<CR>

"Attempt to force the terminal to display more colors
set t_Co=256
"Color scheme!
colorscheme molokai
"Rainbow parens on all the time
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

"Remove the menubar
set guioptions-=T


"Move by screen lines instead of file lines, in case of screen wrap
nnoremap j gj
nnoremap k gk

"Remap jj to esc, for quicker exiting to normal mode
inoremap jj <ESC>

"Show invisibles - tab and EOL, in the style of Textmate
set listchars=tab:▸\ ,eol:¬
nnoremap <leader>l :set list!<CR>

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

"Automatically tabulate when inserting the pipe symbol.
"Borrowed from Tim Pope's gist: https://gist.github.com/287147
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

"Some great mappings from Vimcast #29: http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
nnoremap <leader>a= :Tabularize /=<CR>
vnoremap <leader>a= :Tabularize /=<CR>
nnoremap <leader>a: :Tabularize /:\zs<CR>
vnoremap <leader>a: :Tabularize /:\zs<CR>

"Attempt to prevent CtrlP from sometimes opening a new split, sometimes not
let g:ctrlp_jump_to_buffer = 0

autocmd FileType text set wrap

"Insert a quick carriage return, instead of entering and exiting insert mode
nnoremap <silent> <leader><CR> i<CR><ESC>

"Easily navigate between open buffers
nnoremap <leader>z :bp<CR>
nnoremap <leader>x :bn<CR>

" Window navigation
" from http://www.agillo.net/simple-vim-window-management/
function! WinMove(key) 
  let t:curwin = winnr()
  exec "wincmd ".a:key
  if (t:curwin == winnr()) "we havent moved
    if (match(a:key,'[jk]')) "were we going up/down
      wincmd v
    else 
      wincmd s
    endif
    exec "wincmd ".a:key
  endif
endfunction
 
nnoremap <c-h>  :call WinMove('h')<cr>
nnoremap <c-k>  :call WinMove('k')<cr>
nnoremap <c-l>  :call WinMove('l')<cr>
nnoremap <c-j>  :call WinMove('j')<cr>
nnoremap <leader>wc :wincmd q<cr>
nnoremap <leader>wr <C-W>r
nnoremap <leader>H  :wincmd H<cr>
nnoremap <leader>K  :wincmd K<cr>
nnoremap <leader>L  :wincmd L<cr>
nnoremap <leader>J  :wincmd J<cr>

nnoremap <left>  :3wincmd <<cr>
nnoremap <right> :3wincmd ><cr>
nnoremap <up>    :3wincmd +<cr>
nnoremap <down>  :3wincmd -<cr>

" Taken from http://stackoverflow.com/questions/4331776/change-vim-swap-backup-undo-file-name 
" Sets up undo, backup, and swap directories more like they should be

" Backups, undos, and swap files                                                                                                                             {1
"-----------------------------------------------------------------------------
" Save your backups to a less annoying place than the current directory.
" If you have .vim-backup in the current directory, it'll use that.
" Otherwise it saves it to ~/.vim/backup or . if all else fails.
if isdirectory($HOME . '/.vim-backup') == 0
  :silent !mkdir -p ~/.vim-backup >/dev/null 2>&1
endif
set backupdir^=~/.vim-backup/
set backup
" Prevent backups from overwriting each other. The naming is weird,
" since I'm using the 'backupext' variable to append the path.
" So the file '/home/docwhat/.vimrc' becomes '.vimrc%home%docwhat~'
if has("autocmd")
  autocmd BufWritePre * let &backupext = substitute(expand('%:p:h'), '/', '%', 'g') . '~'
endif

" Save your swp files to a less annoying place than the current directory.
" If you have .vim-swap in the current directory, it'll use that.
" Otherwise it saves it to ~/.vim/swap, ~/tmp or .
if isdirectory($HOME . '/.vim-swap') == 0
  :silent !mkdir -p ~/.vim-swap >/dev/null 2>&1
endif
set directory^=~/.vim-swap/
set directory+=~/tmp//
set directory+=.

" viminfo stores the the state of your previous editing session
set viminfo+=n~/.viminfo

if exists("+undofile")
  " undofile - This allows you to use undos after exiting and restarting
  " This, like swap and backups, uses .vim-undo first, then ~/.vim/undo
  " :help undo-persistence
  " This is only present in 7.3+
  if isdirectory($HOME . '/.vim-undo') == 0
    :silent !mkdir -p ~/.vim-undo > /dev/null 2>&1
  endif
  set undodir^=~/.vim-undo/
  set undofile
  set undolevels=1000
  set undoreload=10000
endif

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
if has("autocmd")
  autocmd BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif
endif

" Set syntastic to show error lines
let g:syntastic_enable_signs=1

"Prevent highlight being lost on indent change
vnoremap < <gv
vnoremap > >gv

"Keybinding to pretty-print the current day
nnoremap <leader>d "=strftime("%a %b %d %G")<CR>p

" Enable omni completion. Not required if they are already set elsewhere in .vimrc
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

" Status line
" Pulled from http://stackoverflow.com/questions/5375240/a-more-useful-statusline-in-vim/10416234#10416234
set statusline=
set statusline+=%7*\[%n]                                  "buffernr
set statusline+=%1*\ %<%F\                                "File+path
set statusline+=%2*\ %y\                                  "FileType
set statusline+=%3*\ %{''.(&fenc!=''?&fenc:&enc).''}      "Encoding
set statusline+=%3*\ %{(&bomb?\",BOM\":\"\")}\            "Encoding2
set statusline+=%4*\ %{&ff}\                              "FileFormat (dos/unix..) 
set statusline+=%5*\ %{&spelllang}\                       "Spellanguage & Highlight on?
set statusline+=%8*\ %{fugitive#statusline()}\            "Current git status
set statusline+=%8*\ %=\ row:%l/%L\ (%03p%%)\             "Rownumber/total (%)
set statusline+=%9*\ col:%03c\                            "Colnr
set statusline+=%0*\ \ %m%r%w\ %P\ \                      "Modified? Readonly? Top/bot.

function! HighlightSearch()
  if &hls
    return 'H'
  else
    return ''
  endif
endfunction

hi User1 guifg=#ffdad8  guibg=#880c0e ctermbg=88 ctermfg=15 
hi User2 guifg=#000000  guibg=#F4905C ctermbg=130 ctermfg=0
hi User3 guifg=#292b00  guibg=#f4f597 ctermbg=221 ctermfg=0
hi User4 guifg=#112605  guibg=#aefe7B ctermbg=10 ctermfg=0
hi User5 guifg=#051d00  guibg=#7dcc7d ctermbg=71 ctermfg=0
hi User7 guifg=#ffffff  guibg=#880c0e gui=bold cterm=bold ctermbg=88 ctermfg=15
hi User8 guifg=#ffffff  guibg=#5b7fbb ctermbg=25 ctermfg=15
hi User9 guifg=#ffffff  guibg=#810085 ctermbg=54 ctermfg=15
hi User0 guifg=#ffffff  guibg=#094afe ctermbg=11 ctermfg=0
