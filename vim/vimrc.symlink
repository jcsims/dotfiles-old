set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'

"github repos
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-speeddating'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-characterize'
Bundle 'tpope/vim-rails'
Bundle 'godlygeek/tabular'
Bundle 'ervandew/supertab'
Bundle 'kien/ctrlp.vim'
Bundle 'honza/snipmate-snippets'
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'tomtom/tlib_vim'
Bundle 'garbas/vim-snipmate'
Bundle 'scrooloose/syntastic'
Bundle 'vim-ruby/vim-ruby'
Bundle 'jcf/vim-latex'
Bundle 'Rykka/colorv.vim'
Bundle 'Shougo/vimproc'
Bundle 'eagletmt/ghcmod-vim'
Bundle 'dag/vim2hs'
Bundle 'ujihisa/neco-ghc'
Bundle 'Shougo/neocomplcache'
Bundle 'vim-scripts/sudo.vim'
Bundle 'klen/python-mode'
Bundle 'ervandew/screen'
Bundle 'jcfaria/Vim-R-plugin'

" Filetypes
Bundle 'wavded/vim-stylus'
Bundle 'slim-template/vim-slim'
Bundle 'tpope/vim-haml'
Bundle 'groenewege/vim-less'
Bundle 'kchmck/vim-coffee-script'
Bundle 'pangloss/vim-javascript'
Bundle 'statianzo/vim-jade'
Bundle 'timcharper/textile.vim'
Bundle 'tpope/vim-liquid'
Bundle 'tpope/vim-markdown'
Bundle 'itspriddle/vim-jquery'
Bundle 'nono/vim-handlebars'
Bundle 'mutewinter/nginx.vim'
Bundle 'hail2u/vim-css3-syntax'
Bundle 'leshill/vim-json'

" Colors!
Bundle 'tomasr/molokai'
Bundle 'chriskempson/vim-tomorrow-theme'


filetype plugin indent on
syntax on

set shell=/usr/local/bin/zsh\ -l

"Set tab options to preferred 2 spaces
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

set encoding=utf-8
set scrolloff=3
set autoindent
set copyindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set wildignore=*.swp,*.bak
set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set nu
set title

"Search options, including <leader><space> to clear search results
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>

"Set up column at column width to stick with sane column width while coding
set nowrap
set formatoptions=qrn1
set colorcolumn=80

if has("autocmd")
  autocmd FileType tex set fo+=t tw=80
  autocmd FileType latex set fo+=t tw=80
  autocmd FileType txt set fo+=t tw=80
  autocmd FileType markdown set fo+=t tw=80
endif

"Save all files anytime focus is lost
if (expand("%") != "")
  au FocusLost * :wa
endif

"Allow for quick and easy editing and sourcing of vimrc
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

"Attempt to force the terminal to display more colors
set t_Co=256
"Color scheme!
colorscheme molokai

"Remove the menubar
set guioptions-=T

"Make proper use of the arrow keys - resize windows!
nmap <left>  :3wincmd <<cr>
nmap <right> :3wincmd ><cr>
nmap <up>    :3wincmd +<cr>
nmap <down>  :3wincmd -<cr>

"Move by screen lines instead of file lines, in case of screen wrap
nnoremap j gj
nnoremap k gk

"Remap jj to esc, for quicker exiting to normal mode
inoremap jj <ESC>

"Show invisibles - tab and EOL, in the style of Textmate
set listchars=tab:▸\ ,eol:¬
nmap <leader>l :set list!<CR>

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

"Automatically tabulate when inserting the pipe symbol.
"Borrowed from Tim Pope's gist: https://gist.github.com/287147
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

"Some great mappings from Vimcast #29: http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
nmap <leader>a= :Tabularize /=<CR>
vmap <leader>a= :Tabularize /=<CR>
nmap <leader>a: :Tabularize /:\zs<CR>
vmap <leader>a: :Tabularize /:\zs<CR>

"Attempt to prevent CtrlP from sometimes opening a new split, sometimes not
let g:ctrlp_jump_to_buffer = 0

autocmd FileType text set wrap

"Insert a quick carriage return, instead of entering and exiting insert mode
nmap <silent> <leader><CR> i<CR><ESC>

"Easily navigate between open buffers
nmap <leader>z :bp<CR>
nmap <leader>x :bn<CR>

" Taken from http://stackoverflow.com/questions/4331776/change-vim-swap-backup-undo-file-name 
" Sets up undo, backup, and swap directories more like they should be

" Backups, undos, and swap files                                                                                                                             {1
"-----------------------------------------------------------------------------
" Save your backups to a less annoying place than the current directory.
" If you have .vim-backup in the current directory, it'll use that.
" Otherwise it saves it to ~/.vim/backup or . if all else fails.
if isdirectory($HOME . '/.vim-backup') == 0
  :silent !mkdir -p ~/.vim-backup >/dev/null 2>&1
endif
set backupdir^=~/.vim-backup/
set backup
" Prevent backups from overwriting each other. The naming is weird,
" since I'm using the 'backupext' variable to append the path.
" So the file '/home/docwhat/.vimrc' becomes '.vimrc%home%docwhat~'
if has("autocmd")
  autocmd BufWritePre * let &backupext = substitute(expand('%:p:h'), '/', '%', 'g') . '~'
endif

" OSX-specific settings
if has("macunix")
  set backupskip+=/private/tmp/*
  set clipboard=unnamed "send yanks to the clipboard
  let g:vimrplugin_term = "/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal"
  "Force vim to use screen instead of communicating to the GUI
  let g:vimrplugin_applescript = 0
endif

" Save your swp files to a less annoying place than the current directory.
" If you have .vim-swap in the current directory, it'll use that.
" Otherwise it saves it to ~/.vim/swap, ~/tmp or .
if isdirectory($HOME . '/.vim-swap') == 0
  :silent !mkdir -p ~/.vim-swap >/dev/null 2>&1
endif
set directory^=~/.vim-swap/
set directory+=~/tmp//
set directory+=.

" viminfo stores the the state of your previous editing session
set viminfo+=n~/.viminfo

if exists("+undofile")
  " undofile - This allows you to use undos after exiting and restarting
  " This, like swap and backups, uses .vim-undo first, then ~/.vim/undo
  " :help undo-persistence
  " This is only present in 7.3+
  if isdirectory($HOME . '/.vim-undo') == 0
    :silent !mkdir -p ~/.vim-undo > /dev/null 2>&1
  endif
  set undodir^=~/.vim-undo/
  set undofile
  set undolevels=1000
  set undoreload=10000
endif

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
if has("autocmd")
  autocmd BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif
endif

" Set syntastic to show error lines
let g:syntastic_enable_signs=1

"Prevent highlight being lost on indent change
vnoremap < <gv
vnoremap > >gv

"Keybinding to pretty-print the current day
nnoremap <leader>d "=strftime("%a %b %d %G")<CR>p

" Settings for neocomplcache
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" Use underscore completion.
let g:neocomplcache_enable_underbar_completion = 1
" Sets minimum char length of syntax keyword.
let g:neocomplcache_min_syntax_length = 3

" Define keyword, for minor languages
if !exists('g:neocomplcache_keyword_patterns')
  let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" SuperTab like snippets behavior.
imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" Enable omni completion. Not required if they are already set elsewhere in .vimrc
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

" Enable heavy omni completion, which require computational power and may stall the vim. 
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'

" Status line
" Pulled from http://stackoverflow.com/questions/5375240/a-more-useful-statusline-in-vim/10416234#10416234
set statusline=
set statusline+=%7*\[%n]                                  "buffernr
set statusline+=%1*\ %<%F\                                "File+path
set statusline+=%2*\ %y\                                  "FileType
set statusline+=%3*\ %{''.(&fenc!=''?&fenc:&enc).''}      "Encoding
set statusline+=%3*\ %{(&bomb?\",BOM\":\"\")}\            "Encoding2
set statusline+=%4*\ %{&ff}\                              "FileFormat (dos/unix..) 
set statusline+=%5*\ %{&spelllang}\                       "Spellanguage & Highlight on?
set statusline+=%8*\ %{fugitive#statusline()}\            "Current git status
set statusline+=%8*\ %=\ row:%l/%L\ (%03p%%)\             "Rownumber/total (%)
set statusline+=%9*\ col:%03c\                            "Colnr
set statusline+=%0*\ \ %m%r%w\ %P\ \                      "Modified? Readonly? Top/bot.

function! HighlightSearch()
  if &hls
    return 'H'
  else
    return ''
  endif
endfunction

hi User1 guifg=#ffdad8  guibg=#880c0e ctermbg=88 ctermfg=15 
hi User2 guifg=#000000  guibg=#F4905C ctermbg=130 ctermfg=0
hi User3 guifg=#292b00  guibg=#f4f597 ctermbg=221 ctermfg=0
hi User4 guifg=#112605  guibg=#aefe7B ctermbg=10 ctermfg=0
hi User5 guifg=#051d00  guibg=#7dcc7d ctermbg=71 ctermfg=0
hi User7 guifg=#ffffff  guibg=#880c0e gui=bold cterm=bold ctermbg=88 ctermfg=15
hi User8 guifg=#ffffff  guibg=#5b7fbb ctermbg=25 ctermfg=15
hi User9 guifg=#ffffff  guibg=#810085 ctermbg=54 ctermfg=15
hi User0 guifg=#ffffff  guibg=#094afe ctermbg=11 ctermfg=0
