#+TITLE: Emacs configuration

Most of what is found in these files has been pulled from the
dotfiles of others.  Take what you want, but be prepared to
troubleshoot yourself!
* Personal Info
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Chris Sims"
        user-mail-address "chris@jcsi.ms"
        calendar-latitude 47.4
        calendar-longitude -122.2
        calendar-location-name "Kent, WA")
#+END_SRC
* Package setup
#+BEGIN_SRC emacs-lisp
  (setq package-archives
        '(("gnu"          . "https://elpa.gnu.org/packages/")
          ("melpa"        . "https://melpa.org/packages/")
          ("melpa-stable" . "https://stable.melpa.org/packages/")))

  (package-initialize)
  (setq-default paradox-execute-asynchronously t)
#+END_SRC
* Custom config
#+BEGIN_SRC emacs-lisp
  ;; Add custom to the start of the file in an attempt to avoid emacs
  ;; asking about smart-mode-line's theme every time on startup
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)

  (custom-set-faces)
#+END_SRC
* Add local dir to load path
Mostly just for packages that I can't get from an ELPA repository.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+END_SRC
* Benchmark startup and package load times
Sometimes it's nice to see how long packages take to start up. I don't
use it often though.

#+BEGIN_SRC emacs-lisp
(defun sanityinc/time-subtract-millis (b a)
  "Sanely get the difference between B and A."
  (* 1000.0 (float-time (time-subtract b a))))

(defvar sanityinc/require-times nil
  "A list of (FEATURE . LOAD-DURATION).
LOAD-DURATION is the time taken in milliseconds to load FEATURE.")

(defadvice require
  (around build-require-times (feature &optional filename noerror) activate)
  "Note in `sanityinc/require-times' the time taken to require each feature."
  (let* ((already-loaded (memq feature features))
         (require-start-time (and (not already-loaded) (current-time))))
    (prog1
        ad-do-it
      (when (and (not already-loaded) (memq feature features))
        (add-to-list 'sanityinc/require-times
                     (cons feature
                           (sanityinc/time-subtract-millis (current-time)
                                                           require-start-time))
                     t)))))

;; Measure overall startup time
(add-hook 'after-init-hook
          (lambda ()
            (message "init completed in %.2fms"
                     (sanityinc/time-subtract-millis after-init-time before-init-time))))

#+END_SRC

* Make sure PATH is set correctly
#+BEGIN_SRC emacs-lisp
(exec-path-from-shell-initialize)
#+END_SRC
* Set some initial defaults
#+BEGIN_SRC emacs-lisp
  (setq-default inhibit-splash-screen t   ; Don't show the splash screen
                ring-bell-function 'ignore ; Just ignore error notifications
                vc-make-backup-files t     ; Make backups of files,
                vc-follow-symlinks t ; even when they're in version control
                backup-directory-alist ; Save backups to a central location
                `(("." . ,(expand-file-name
                           (concat user-emacs-directory "backups"))))
                global-auto-revert-non-file-buffers t ; Refresh dired buffers,
                auto-revert-verbose nil   ; but do it quietly
                indent-tabs-mode nil ; Don't use tabs unless buffer-local
                gui-select-enable-clipboard t
                x-select-enable-primary t
                save-interprogram-paste-before-kill t
                apropos-do-all t
                mouse-yank-at-point t
                save-place-file (concat user-emacs-directory "places")
                ;; When scrolling, make sure to come back to the same spot
                scroll-preserve-screen-position 'always
                scroll-error-top-bottom t ; Scroll similar to vim
                )
#+END_SRC
* Show some info about messy whitespace
Highlight cols past 80 chars and trailing whitespace
#+BEGIN_SRC emacs-lisp
  (setq-default whitespace-line-column 80
                whitespace-style '(face trailing lines-tail))
#+END_SRC
* Set the editor theme, and the mode-line
The light solarized theme is quite nice during the day (and seems to
be easier for me to see, in general) but is way too bright at night.

Smart mode line is a nice alternative to the default modeline.
#+BEGIN_SRC emacs-lisp
  (setq active-theme 'solarized-light)
  (load-theme 'solarized-light t)
  (defun toggle-dark-light-theme ()
    "Toggle the current solarized theme between light and dark."
    (interactive)
    (if (eq active-theme 'solarized-light)
        (setq active-theme 'solarized-dark)
      (setq active-theme 'solarized-light))
    (load-theme active-theme))

  (sml/setup)
#+END_SRC
* &rest
#+BEGIN_SRC emacs-lisp

  (column-number-mode)

  ;; Turn off the toolbar and scroll bar
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))

  (when (memq window-system '(mac ns))
    (set-frame-font "-*-Menlo-normal-normal-normal-*-12-*-*-*-m-0-iso10646-1"))
  (global-prettify-symbols-mode 1)
  ;; (insert "\n(set-frame-font \"" (cdr (assoc 'font (frame-parameters))) "\")")

  ;; Always use UTF-8
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

  ;; y/n keypresses instead of typing out yes or no
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Ensure that when we go to a new line, it's indented properly
  (electric-indent-mode)

  (add-hook 'prog-mode-hook 'whitespace-mode)

  ;; Fill mode is pretty handy
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'org-mode 'turn-on-auto-fill)
  (add-hook 'markdown-mode 'turn-on-auto-fill)

  ;; Auto-refresh buffers
  (global-auto-revert-mode)

  ;; Quick access to a few files
  (global-set-key (kbd "C-c e i")
                  (lambda () (interactive) (find-file "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c e t")
                  (lambda () (interactive) (find-file "~/org/todo.org")))
  (global-set-key (kbd "C-c e d")
                  (lambda () (interactive) (find-file "~/org/dev.org")))
  (global-set-key (kbd "C-c e w")
                  (lambda () (interactive) (find-file "~/org/weekly-summary.org")))

  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)

  (setq-default save-place t)

  ;; Highlight matching parens
  (show-paren-mode t)

  ;; Ensure that a server is running for quicker start times
  (require 'server)
  (unless (server-running-p)
    (server-start))

  ;; Allow for seamless gpg interaction
  (require 'epa-file)
  (epa-file-enable)

  ;; Work-specific code - should be encrypted!
  (setq work-init (concat user-emacs-directory "lisp/init-work.el.gpg"))
  (if (file-exists-p work-init)
      (load work-init))

  ;; Flyspell mode
  (add-hook 'text-mode-hook 'flyspell-mode)

  ;; For some reason, zsh files are not opened in shell mode =/
  (add-to-list 'auto-mode-alist '("\\*.zsh*\\'" . sh-mode))
  (add-to-list 'auto-mode-alist '("\\zshrc\\'" . sh-mode))

  ;; Config other packages
  (add-hook 'after-init-hook 'global-company-mode)

  ;; Enable M-. and M-, along with C-c C-d {c,C-d} for elisp
  (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
    (add-hook hook 'turn-on-elisp-slime-nav-mode))

  (add-hook 'prog-mode-hook 'idle-highlight-mode)

  (setq-default ag-highlight-search t
                ag-reuse-buffers t)

  (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)

  (add-hook 'after-init-hook #'global-flycheck-mode)

  (setq-default ido-enable-flex-matching t
                ido-use-filename-at-point nil
                ido-auto-merge-work-directories-length 0
                ido-use-virtual-buffers t
                ido-default-buffer-method 'selected-window
                ido-use-faces nil)

  (ido-mode t)
  (ido-everywhere t)
  (add-hook 'ido-setup-hook (lambda () (define-key ido-completion-map [up]
                                    'previous-history-element)))

  (ido-ubiquitous-mode t)
  (flx-ido-mode t)

  (setq-default smex-save-file (expand-file-name ".smex-items" user-emacs-directory))

  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)

  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

  (global-git-gutter-mode)

  (setq-default magit-last-seen-setup-instructions "1.4.0"
                ;; Gravatars are messed up in OSX
                magit-revision-use-gravatar-kludge t
                magit-branch-adjust-remote-upstream-alist '(("upstream/master" . "issue-")))
  (global-set-key (kbd "C-c g") 'magit-status)

  (windmove-default-keybindings)

  (winner-mode 1)

  (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
  (add-hook 'prog-mode-hook 'paredit-everywhere-mode)

  (projectile-mode)

  (global-set-key (kbd "C-=") 'er/expand-region)

  (browse-kill-ring-default-keybindings)

  ;; Increase the GC threshold
  (setq gc-cons-threshold 20000000)

  (add-to-list 'auto-mode-alist '("Dockerfile" . dockerfile-mode))

  (put 'erase-buffer 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)

  (dumb-jump-mode)

  (add-to-list 'auto-mode-alist '("\\.yml.*\\'" . yaml-mode))

  (which-key-mode)

  (global-set-key (kbd "C-+") 'mc/mark-next-like-this)

  (require 're-builder)
  (setq reb-re-syntax 'string)
#+END_SRC
* Functions
A bunch of random functions I may or may not use...
#+BEGIN_SRC emacs-lisp
;; Originally taken from:
;; http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/
(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))
  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

;; remap C-a to `smarter-move-beginning-of-line'
(global-set-key [remap move-beginning-of-line]
                'smarter-move-beginning-of-line)

;; Taken from the Emacs Wiki: http://www.emacswiki.org/emacs/InsertDate
(defun insert-date (prefix)
  "Insert the current date. With prefix-argument, use ISO
  format."
  (interactive "P")
  (let ((format (cond
                 ((not prefix) "%a %d %b %Y")
                 ((equal prefix '(4)) "%Y-%m-%d"))))
    (insert (format-time-string format))))

(global-set-key (kbd "C-c d") 'insert-date)

;; Taken from http://whattheemacsd.com/editing-defuns.el-01.html
(defun open-line-below ()
  "Anywhere on the line, open a new line below current line."
  (interactive)
  (end-of-line)
  (newline)
  (indent-for-tab-command))

(defun open-line-above ()
  "Anywhere on the line, open a new line above current line."
  (interactive)
  (beginning-of-line)
  (newline)
  (forward-line -1)
  (indent-for-tab-command))

(global-set-key (kbd "<C-return>") 'open-line-below)
(global-set-key (kbd "<C-S-return>") 'open-line-above)

(defmacro rename-modeline (package-name mode new-name)
  "Change the name of a mode on the mode-line.
In PACKAGE-NAME, change MODE from PACKAGE-NAME to NEW-NAME.
Taken from what the emacs.d."
  `(eval-after-load ,package-name
     '(defadvice ,mode (after rename-modeline activate)
        (setq mode-name ,new-name))))

;; Taken from technomancy's emacs.d
(global-set-key (kbd "C-c n")
                (defun pnh-cleanup-buffer ()
                  (interactive)
                  (delete-trailing-whitespace)
                  (untabify (point-min) (point-max))
                  (indent-region (point-min) (point-max))))

;; A few taken from bodil
(defun recompile-init ()
  "Byte-compile all your dotfiles again."
  (interactive)
  (byte-recompile-directory user-emacs-directory 0))

(defun sudo-edit ()
  "Edit current buffer using sudo."
  (interactive)
  (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name)))

(defun remove-elc-on-save ()
  "If you're saving an elisp file, likely the .elc is no longer valid."
  (make-local-variable 'after-save-hook)
  (add-hook 'after-save-hook
            (lambda ()
              (if (file-exists-p (concat buffer-file-name "c"))
                  (delete-file (concat buffer-file-name "c"))))))

(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'emacs-lisp-mode-hook 'remove-elc-on-save)

;; Set transparency of current frame
(defun transparency (value)
  "Set the transparency of the frame window.  VALUE: 0=transparent/100=opaque."
  (interactive "nTransparency Value 0 - 100 opaque:")
  (set-frame-parameter (selected-frame) 'alpha value))

;; Define a nice multi-purpose commenting command
;; Taken from http://endlessparentheses.com/implementing-comment-line.html
(defun endless/comment-line-or-region (n)
  "Comment or uncomment current line and leave point after it.
With positive prefix, apply to N lines including current one.
With negative prefix, apply to -N lines above.
If region is active, apply to active region instead."
  (interactive "p")
  (if (use-region-p)
      (comment-or-uncomment-region
       (region-beginning) (region-end))
    (let ((range
           (list (line-beginning-position)
                 (goto-char (line-end-position n)))))
      (comment-or-uncomment-region
       (apply #'min range)
       (apply #'max range)))
    (forward-line 1)
    (back-to-indentation)))

(global-set-key (kbd "C-c ;") 'endless/comment-line-or-region)

;; Clear buffer in eshell
(defun eshell-clear-buffer ()
  "Clear eshell buffer."
  (interactive)
  (let ((inhibit-read-only t))
    (erase-buffer)
    (eshell-send-input)))

(add-hook 'eshell-mode-hook
      '(lambda()
          (local-set-key (kbd "C-l") 'eshell-clear-buffer)))

;; Stolen from Reddit:
;; https://www.reddit.com/r/emacs/comments/3uu1iw/setting_and_using_emacs_in_three_columns/
(defun emc-working-split (window-count)
  "Make vertical splits for working window setup, and populate
them with appropriate buffers.  Buffers are the most recently
used from (projectile-project-buffers), falling back
to (buffer-list) when not in a project.

If optional argument WINDOW-COUNT is omitted or nil, default to
max splits of at least 90 chars wide."
  (interactive "P")
  (recentf-mode t) ; Make sure recentf mode is on - won't work without it
  (let* ((window-count (if window-count window-count (/ (frame-width) 104)))
         (show-buffers (cond
                        ((projectile-project-p)
                         (dotimes (i window-count) ;; ensure enough
                           ;; buffers open
                           (let ((num-files (length (projectile-recentf-files))))
                             (unless (>= i num-files)
                               (find-file-noselect (concat (projectile-project-root)
                                                           (nth i (projectile-recentf-files)))))))
                         (projectile-project-buffers))
                        (t
                         (remove-if 'minibufferp (buffer-list))))))
    (delete-other-windows)
    ;; split window appropriate count - make 2nd window current
    (dotimes (i (- window-count 1))
      (split-window-horizontally)
      (if (= i 0) (other-window 1)))
    (balance-windows)
    ;; set window buffer from show-buffers list
    (mapcar* 'set-window-buffer (window-list nil "no-minibuf") show-buffers)))

(global-set-key (kbd "C-c 3") 'emc-working-split)

(defun dired-do-ispell (&optional arg)
  "Check all marked files ARG with ispell.  Borrowed from the
Emacswiki."
  (interactive "P")
  (dolist (file (dired-get-marked-files
                 nil arg
                 #'(lambda (f)
                     (not (file-directory-p f)))))
    (save-window-excursion
      (with-current-buffer (find-file file)
        (ispell-buffer)))
    (message nil)))

;; Some functions carried over from the emacs starter kit
(defun esk-local-comment-auto-fill ()
  (set (make-local-variable 'comment-auto-fill-only-comments) t)
  (auto-fill-mode t))

(defun esk-turn-on-hl-line-mode ()
  (when (> (display-color-cells) 8)
    (hl-line-mode t)))

(defun esk-turn-on-save-place-mode ()
  (require 'saveplace)
  (setq save-place t))

(defun esk-pretty-lambdas ()
  (font-lock-add-keywords
   nil `(("(?\\(lambda\\>\\)"
          (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                    ,(make-char 'greek-iso8859-7 107))
                    nil))))))

(defun esk-add-watchwords ()
  (font-lock-add-keywords
   nil '(("\\<\\(FIX\\(ME\\)?\\|TODO\\|HACK\\|REFACTOR\\|NOCOMMIT\\)"
          1 font-lock-warning-face t))))

(add-hook 'prog-mode-hook 'esk-local-comment-auto-fill)
;; (add-hook 'prog-mode-hook 'esk-turn-on-hl-line-mode)
(add-hook 'prog-mode-hook 'esk-turn-on-save-place-mode)
(add-hook 'prog-mode-hook 'esk-pretty-lambdas)
(add-hook 'prog-mode-hook 'esk-add-watchwords)

(defun toggle-pair-mode ()
  "Turn on/off some modes that are friendlier to pairing."
  (interactive)
  (if global-linum-mode
    (progn
      (global-linum-mode 0)
      (git-gutter-mode))
    (progn
        (git-gutter-mode 0)
        (global-linum-mode))))

(defun jcs-magit-commit-template (&rest _)
  "Ensures that commits on an issue- branch have the issue name
  in the commit as well."
  (let ((prefix (magit-get-current-branch)))
    (if (string-prefix-p "issue-" prefix)
        (progn
          (goto-char (point-min))
          (if (not (search-forward prefix (line-end-position) t))
              (progn
                (goto-char (point-min))
                (insert prefix ": "))
            (goto-char (point-min)))))))

(add-hook 'git-commit-mode-hook 'jcs-magit-commit-template)

#+END_SRC

* AUCTeX
I haven't used this config since I was working on my thesis, take it
with a grain of salt...
#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(add-hook 'LaTeX-mode-hook 'auto-fill-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(setq-default TeX-auto-save t
              TeX-parse-self t
              TeX-master nil
              TeX-PDF-mode t
              reftex-plug-into-AUCTeX t)
(when (eq system-type 'darwin) ;; mac-specific settings
  (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
  (setq-default TeX-source-correlate-method 'synctex)
  (setq-default TeX-view-program-list
                '(("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))
  (setq-default TeX-view-program-selection '((output-pdf "Skim"))))
(add-hook 'TeX-mode-hook
          (lambda ()
            (add-to-list
             'TeX-output-view-style
             '("^pdf$" "."
               "/Applications/Skim.app/Contents/SharedSupport/displayline -b %n %o %b"))))

;; Use latex-extra package
(add-hook 'LaTeX-mode-hook #'latex-extra-mode)
#+END_SRC
* Clojure
#+BEGIN_SRC emacs-lisp
  (rename-modeline "clojure-mode" clojure-mode "Clj")

  (require 'clojure-mode)
  ;;; Cider
  ;; Don't prompt for a symbol with `M-.`
  (setq-default cider-prompt-for-symbol nil
                cljr-favor-prefix-notation nil
                cider-repl-display-help-banner nil)
  (add-hook 'cider-mode-hook 'eldoc-mode)
  (add-hook 'clojure-mode-hook 'cider-mode)
  (add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'cider-repl-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'clojure-mode-hook 'paredit-mode)
  (add-hook 'cider-repl-mode-hook 'paredit-mode)
  (add-hook 'cider-repl-mode-hook 'eldoc-mode)

  (defun tdd-test ()
    "Thin wrapper around `cider-test-run-project-tests', borrowed from
    http://endlessparentheses.com/test-driven-development-in-cider-and-emacs.html"
    (when (cider-connected-p)
      (cider-test-run-project-tests)))

  (define-minor-mode tdd-mode
    "Run all Clojure tests whenever a file is saved"
    nil " TDD" nil
    (if tdd-mode
        (add-hook 'after-save-hook #'tdd-test nil 'local)
      (remove-hook 'after-save-hook #'tdd-test 'local)))

  (require 'clj-refactor)
  (add-hook 'clojure-mode-hook (lambda ()
                                 (clj-refactor-mode 1)
                                 (yas-minor-mode 1)
                                 (cljr-add-keybindings-with-prefix "C-c r")))


  (setq nrepl-hide-special-buffers t)

  ;; Add some goodies from Emacs Live
  (eval-after-load 'clojure-mode
    '(font-lock-add-keywords
      'clojure-mode `(("\\(#\\)("
                       (0 (progn (compose-region (match-beginning 1)
                                                 (match-end 1) "ƒ")
                                 nil))))))

  (eval-after-load 'clojure-mode
    '(font-lock-add-keywords
      'clojure-mode `(("\\(#\\){"
                       (0 (progn (compose-region (match-beginning 1)
                                                 (match-end 1) "∈")
                                 nil))))))

  ;; Set up proper indentation for a few compojure functions
  (eval-after-load 'clojure-mode
    '(define-clojure-indent
       (defroutes 'defun)
       (GET 2)
       (POST 2)
       (PUT 2)
       (DELETE 2)
       (HEAD 2)
       (ANY 2)
       (context 2)))

  (require 'clj-refactor)
  (setq-default cljr-suppress-middleware-warnings t)

  ;; Lazily build ASTs, instead of immediately on REPL connect
  (setq cljr-warn-on-eval t)
  (setq cljr-eagerly-build-asts-on-startup nil)

  (add-to-list 'auto-mode-alist '("\\.clj.*\\'" . clojure-mode))
  (add-to-list 'auto-mode-alist '("\\.edn.*\\'" . clojure-mode))

  ;; Try out a linter...
  (require 'flycheck-joker)
#+END_SRC
* Elixir
#+BEGIN_SRC emacs-lisp
(require 'alchemist)

;; Run the whole test suite with alchemist-mix-test after saving a buffer.
;; (setq alchemist-hooks-test-on-save t)

;; Compile your project with alchemist-mix-compile after saving a buffer.
;; (setq alchemist-hooks-compile-on-save t)
#+END_SRC
* Haskell
#+BEGIN_SRC emacs-lisp
(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
(add-hook 'haskell-mode-hook 'turn-on-hi2)
(add-hook 'haskell-mode-hook #'hindent-mode)

(setq-default haskell-tags-on-save t
              haskell-process-suggest-remove-import-lines t
              haskell-process-auto-import-loaded-modules t
              haskell-process-log t)
#+END_SRC
* Org-Mode
#+BEGIN_SRC emacs-lisp
    (require 'org)
    (require 'ox-md)

    (setq org-directory "~/org"
          org-log-done t
          org-startup-indented t
          org-startup-folded t
          org-agenda-files (list (concat org-directory "/todo.org")
                                 (concat org-directory "/dev.org")
                                 (concat org-directory "/todo.org_archive"))
          org-default-notes-file (concat org-directory "/todo.org")
          org-src-fontify-natively t
          org-outline-path-complete-in-steps nil
          org-refile-use-outline-path t
          org-use-fast-todo-selection t)

    ;; Ensure that we can refile to headings a few levels down. This
    ;; should help with organizing.
    (setq org-refile-targets '((nil . (:maxlevel . 4))))

    ;; Use the current window to open the agenda
    (setq-default org-agenda-window-setup 'current-window)

    (defun jcs-agenda ()
      "Open TODO list and Org agenda side-by-side."
      (interactive)
      (delete-other-windows)
      (find-file (concat org-directory "/todo.org"))
      (split-window-horizontally)
      (other-window 1)
      (org-agenda-list))

    (global-set-key "\C-cl" 'org-store-link)
    (global-set-key "\C-cm" 'jcs-agenda)
    (global-set-key "\C-ca" 'org-agenda)
    (global-set-key "\C-cc" 'org-capture)

    (setq org-todo-keywords
          (quote ((sequence "TODO(t)" "NEXT(n)" "DOING(o)" "|" "DONE(d)")
                  (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))))

    ;; Taken from the org-mode manual - Automatically mark a parent task
    ;; as DONE when all child nodes are marked DONE
    (defun org-summary-todo (n-done n-not-done)
      "Switch entry to DONE when all subentries are done, to TODO otherwise."
      (let (org-log-done org-log-states)   ; turn off logging
        (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

    (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)

    (defun reset-weekly-summary ()
      (interactive)
      (find-file (concat org-directory "/weekly-summary.org"))
      (erase-buffer)
      (insert-file-contents (concat org-directory "/weekly-summary-template.org")))

    ;; Add a few languages for execution in org source blocks
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((clojure . t)
                                   (sh . t)
                                   (emacs-lisp . t)
                                   (restclient . t)))

    ;; Don't ask every time before evaluating an org source block
    (setq org-confirm-babel-evaluate nil)

    ;; Add capture templates for questions to ask
    (setq org-capture-templates
          '(("s" "Templates for the Weekly Summary")
            ("sd" "Summary: Did" item (file+olp (concat org-directory "/weekly-summary.org")
                                                "jcsims" "Did"))
            ("so" "Summary: Doing" item (file+olp (concat org-directory "/weekly-summary.org")
                                                  "jcsims" "Doing"))
            ("sb" "Summary: Blockers" item (file+olp (concat org-directory "/weekly-summary.org")
                                                     "jcsims" "Blockers"))
            ("sq" "Summary: Quesions" item (file+olp (concat org-directory "/weekly-summary.org")
                                                     "jcsims" "Questions"))
            ("d" "Templates for docs")
            ("dm" "Docs: Misc" entry (file+olp (concat org-directory "/dev.org")
                                              "Misc"))
            ("de" "Docs: Emacs" entry (file+olp (concat org-directory "/dev.org")
                                               "Emacs"))
            ("dg" "Docs: Git" entry (file+olp (concat org-directory "/dev.org")
                                             "Git"))
            ("dt" "Docs: ThreatGRID" entry (file+olp (concat org-directory "/dev.org")
                                                    "TG"))
            ("dc" "Docs: Clojure" entry (file+olp (concat org-directory "/dev.org")
                                                    "Clojure"))
            ("q" "Alex Question" entry (file (concat org-directory "/questions.org")
                                             "Questions"))
            ("t" "Templates for TODOs")
            ("ta" "TODO: Admin" entry (file+olp (concat org-directory "/todo.org")
                                                "Admin"))
            ("ti" "TODO: Issues" entry (file+olp (concat org-directory "/todo.org")
                                                "Issues"))
            ("tt" "TODO: Tasks" entry (file+olp (concat org-directory "/todo.org")
                                                "Tasks"))))

#+END_SRC

